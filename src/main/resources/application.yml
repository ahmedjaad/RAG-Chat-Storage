spring:
  datasource:
    url: ${DB_URL:jdbc:mysql://localhost:3306/rag_chat_storage}
    username: ${DB_USERNAME:root}
    password: ${DB_PASSWORD:password}
  jpa:
    hibernate:
      ddl-auto: none
    properties:
      hibernate:
        dialect: org.hibernate.dialect.MySQLDialect
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.yaml
  jackson:
    serialization:
      write-dates-as-timestamps: false
  ai:
    openai:
      api-key: ${OPENAI_API_KEY:}
      base-url: ${OPENAI_BASE_URL:https://api.openai.com}
      chat:
        options:
          model: ${OPENAI_CHAT_MODEL:gpt-4o-mini}
          temperature: ${OPENAI_TEMPERATURE:0.2}
          max-tokens: ${OPENAI_MAX_TOKENS:512}
      embedding:
        options:
          model: ${OPENAI_EMBED_MODEL:text-embedding-3-small}
    retry:
      on-http-statuses: 429,500,502,503,504
    client:
      connect-timeout: 10s
      read-timeout: 10s

server:
  port: ${PORT:8080}
  # Max request size is enforced via servlet.multipart and underlying Tomcat connector

# Request size limits (multipart and form bodies)
servlet:
  multipart:
    max-file-size: ${MAX_FILE_SIZE:2MB}
    max-request-size: ${MAX_REQUEST_SIZE:2MB}

management:
  endpoint:
    health:
      show-details: always
      probes:
        enabled: true
      group:
        liveness:
          include: livenessState
        readiness:
          include: db,openai
  endpoints:
    web:
      exposure:
        include: health,info

resilience4j:
  retry:
    instances:
      openai:
        max-attempts: 4
        wait-duration: 500ms
        enable-exponential-backoff: true
        exponential-backoff-multiplier: 2
        enable-randomized-wait: true
        randomized-wait-factor: 0.5
  circuitbreaker:
    instances:
      openai:
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 10s
        minimum-number-of-calls: 10
        sliding-window-size: 20
        sliding-window-type: COUNT_BASED
        wait-duration-in-open-state: 30s
        permitted-number-of-calls-in-half-open-state: 3

# API Key and Rate Limiting
security:
  api-key:
    header: X-API-KEY
    value: ${API_KEY:changeme}
    # Optional: comma-separated list of valid API keys
    values: ${API_KEYS:}
rate-limit:
  requests-per-minute: ${REQUESTS_PER_MINUTE:60}
  burst: ${RATE_BURST:20}

# CORS
cors:
  # Note: If you set allowed-origins to '*', credentials (cookies/auth) will be disabled by design.
  # To allow credentials, specify explicit origins separated by commas, e.g.,
  # CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080
  allowed-origins: ${CORS_ALLOWED_ORIGINS:*}
  allowed-methods: ${CORS_ALLOWED_METHODS:GET,POST,PATCH,DELETE,OPTIONS}
  allowed-headers: ${CORS_ALLOWED_HEADERS:*}
